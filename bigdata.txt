
// bigdataDlg.cpp: 实现文件
//

#include "stdafx.h"
#include "bigdata.h"
#include "bigdataDlg.h"
#include "afxdialogex.h"
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <stdlib.h>
#include <assert.h>
using namespace std;
void reverse_data(string &data);//字符串反转
void compute_value(string lhs, string rhs, string &result);
void reverse_data(string &data)
{
	char temp = '0';
	int start = 0;
	int end = data.size() - 1;
	//assert(data.size() && start <= end);
	while (start < end)
	{
		temp = data[start];
		data[start++] = data[end];
		data[end--] = temp;
	}
}
void compute_value(string lhs, string rhs, string &result)
{
	reverse_data(lhs);
	reverse_data(rhs);
	int i = 0, j = 0, res_i = 0;
	int tmp_i = 0;
	int carry = 0;

	
		for (i = 0; i != lhs.size(); ++i, ++tmp_i)
		{
			res_i = tmp_i;  //在每次计算时，结果存储的位需要增加
			for (j = 0; j != rhs.size(); ++j)
			{
				carry += (result[res_i] - '0') + (lhs[i] - '0') * (rhs[j] - '0');//此处注意，每次计算并不能保证以前计算结果的进位都消除， 并且以前的计算结果也需考虑。
				result[res_i++] = (carry % 10 + '0');
				carry /= 10;
			}
			while (carry)//乘数的一次计算完成，可能存在有的进位没有处理
			{
				result[res_i++] = (carry % 10 + '0');
				carry /= 10;
			}
		}
		for (int i = result.size() - 1; i >= 0; i--)
		{
			if (result[i] != '0')
				break;
			else
				result.pop_back();
			//result.pop();
		}
		reverse_data(result);
	
}
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CbigdataDlg 对话框



CbigdataDlg::CbigdataDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_BIGDATA_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CbigdataDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CbigdataDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CbigdataDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDC_BUTTON2, &CbigdataDlg::OnBnClickedButton2)
END_MESSAGE_MAP()


// CbigdataDlg 消息处理程序

BOOL CbigdataDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CbigdataDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CbigdataDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CbigdataDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CbigdataDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码
	/*CString strEDIT1, strEDIT2, strEDIT3;
	GetDlgItem(IDC_EDIT1)->GetWindowText(strEDIT1);
	GetDlgItem(IDC_EDIT2)->GetWindowText(strEDIT2);
	string a(CW2A(strEDIT1.GetString()));
	string b(CW2A(strEDIT2.GetString()));
	//strEDIT2 = a.c_str();
	//SetDlgItemText(IDC_EDIT2, strEDIT2);
	string result(a.size() + b.size(), '0');
	compute_value(a, b, result);
	strEDIT3 = result.c_str();
	SetDlgItemText(IDC_EDIT3, strEDIT3);
	*/
	CString strEDIT1, strEDIT2, strEDIT3;
	GetDlgItem(IDC_EDIT1)->GetWindowText(strEDIT1);
	GetDlgItem(IDC_EDIT2)->GetWindowText(strEDIT2);
	string a(CW2A(strEDIT1.GetString()));
	string b(CW2A(strEDIT2.GetString()));
	if ((a.size() == 1 && a[0] - '0' == 0) || (b.size() == 1 && b[0] - '0' == 0))
	{
		string result = "0";
		strEDIT3 = result.c_str();
	}
	else
	{
		string result(a.size() + b.size(), '0');
		compute_value(a, b, result);
		strEDIT3 = result.c_str();
	}
	
	SetDlgItemText(IDC_EDIT3, strEDIT3);
}


void CbigdataDlg::OnBnClickedButton2()
{
	// TODO: 在此添加控件通知处理程序代码
	SetDlgItemText(IDC_EDIT1, 0);
	SetDlgItemText(IDC_EDIT2, 0);
	SetDlgItemText(IDC_EDIT3, 0);
}
